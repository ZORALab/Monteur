# Information about the software to be downloaded
[Metadata]
Name = "Go"
Description = """
Go programming language for compiling Go source codes.
"""
Type = "https-download"




# Customization
[Variables]
Version = "1.17.1"
BaseURL = "https://golang.org/dl/"




# Supported OS and CPU Architectures program sources. The Key for supported OS
# and CPU complies to the format:
#	[Sources.{GOOS}-{GOARCH}]
# Only list out supported packages will do.
[Sources.darwin-amd64]
Format = "tar.gz"
Archive = "go{{- .Version -}}.darwin-amd64.{{- .Format -}}"
URL = "{{- .BaseURL -}}{{- .Archive -}}"

[Sources.darwin-arm64]
Format = "tar.gz"
Archive = "go{{- .Version -}}.darwin-arm64.{{- .Format -}}"
URL = "{{- .BaseURL -}}{{- .Archive -}}"

[Sources.linux-amd64]
Format = "tar.gz"
Archive = "go{{- .Version -}}.linux-amd64.{{- .Format -}}"
URL = "{{- .BaseURL -}}{{- .Archive -}}"

[Sources.linux-386]
Format = "tar.gz"
Archive = "go{{- .Version -}}.linux-386.{{- .Format -}}"
URL = "{{- .BaseURL -}}{{- .Archive -}}"

[Sources.linux-arm64]
Format = "tar.gz"
Archive = "go{{- .Version -}}.linux-arm64.{{- .Format -}}"
URL = "{{- .BaseURL -}}{{- .Archive -}}"

[Sources.linux-armv6l]
Format = "tar.gz"
Archive = "go{{- .Version -}}.linux-armv6l.{{- .Format -}}"
URL = "{{- .BaseURL -}}{{- .Archive -}}"

[Sources.windows-386]
Format = "zip"
Archive = "go{{- .Version -}}.windows-386.{{- .Format -}}"
URL = "{{- .BaseURL -}}{{- .Archive -}}"

[Sources.windows-amd64]
Format = "zip"
Archive = "go{{- .Version -}}.windows-amd64.{{- .Format -}}"
URL = "{{- .BaseURL -}}{{- .Archive -}}"

[Sources.freebsd-386]
Format = "tar.gz"
Archive = "go{{- .Version -}}.freebsd-386.{{- .Format -}}"
URL = "{{- .BaseURL -}}{{- .Archive -}}"

[Sources.freebsd-amd64]
Format = "tar.gz"
Archive = "go{{- .Version -}}.freebsd-386.{{- .Format -}}"
URL = "{{- .BaseURL -}}{{- .Archive -}}"

[Sources.linux-ppc64le]
Format = "tar.gz"
Archive = "go{{- .Version -}}.linux-ppc64le.{{- .Format -}}"
URL = "{{- .BaseURL -}}{{- .Archive -}}"

[Sources.windows-arm64]
Format = "zip"
Archive = "go{{- .Version -}}.windows-arm64.{{- .Format -}}"
URL = "{{- .BaseURL -}}{{- .Archive -}}"




# Setup the unpacked software directories/files into the local bin directory.
#
# NOTE: The key field is mainly for sorting purposes.
[[Setup]]
Type = "move"
Condition = "all-all"
Source = "go"
Target = "golang"




# Config file for localized filesystem initialization.
[Config]
linux = """
#!/bin/bash
export LOCAL_BIN="${LOCAL_BIN:-{{- .BinDir -}}}"
export GOROOT="${LOCAL_BIN}/golang"
export GOPATH="${LOCAL_BIN}/gopath"
export GOBIN="${GOPATH}/bin"
export GOCACHE="${LOCAL_BIN}/gocache"
export GOENV="${LOCAL_BIN}/goenv"

stop_go() {
	PATH=:${PATH}:
	GOROOT="${GOROOT}/bin"
	PATH=${PATH//:$GOROOT:/:}
	PATH=${PATH//:$GOBIN:/:}
	PATH=${PATH//:$GOPATH:/:}
	PATH=${PATH%:}
	unset GOROOT GOPATH GOBIN GOCACHE GOENV
}

case $1 in
--stop)
	stop_go
	;;
*)
	export PATH="${PATH}:${GOROOT}/bin:${GOPATH}:${GOBIN}"

	if [ ! -z "$(type -p go)" ] && [ ! -z "$(type -p gofmt)" ]; then
		1>&2 printf "[ DONE  ] localized Go started.\\n"
	else
		1>&2 printf "[ ERROR ] localized Go failed to initalized.\\n"
		stop_go
	fi
	;;
esac
"""
